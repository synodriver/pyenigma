# -*- coding: utf-8 -*-
from unittest import TestCase

from pyenigma import EnigmaMachine

data = [
    99,
    131,
    166,
    42,
    162,
    68,
    243,
    212,
    152,
    71,
    24,
    172,
    151,
    247,
    113,
    78,
    18,
    208,
    111,
    90,
    199,
    137,
    121,
    150,
    213,
    124,
    129,
    7,
    45,
    128,
    57,
    67,
    160,
    56,
    132,
    8,
    202,
    175,
    70,
    93,
    106,
    31,
    122,
    33,
    140,
    20,
    135,
    97,
    10,
    41,
    27,
    167,
    144,
    232,
    102,
    214,
    184,
    211,
    220,
    29,
    168,
    39,
    98,
    37,
    117,
    234,
    86,
    222,
    66,
    158,
    237,
    74,
    245,
    224,
    141,
    164,
    1,
    9,
    145,
    210,
    218,
    206,
    80,
    50,
    204,
    182,
    139,
    250,
    201,
    198,
    236,
    88,
    134,
    83,
    227,
    51,
    239,
    163,
    186,
    197,
    35,
    174,
    94,
    69,
    207,
    17,
    77,
    43,
    194,
    13,
    114,
    104,
    115,
    181,
    53,
    105,
    40,
    44,
    25,
    235,
    133,
    217,
    28,
    165,
    170,
    48,
    229,
    16,
    54,
    116,
    32,
    142,
    107,
    251,
    23,
    209,
    147,
    82,
    100,
    95,
    85,
    5,
    179,
    19,
    156,
    188,
    60,
    255,
    240,
    12,
    47,
    120,
    123,
    183,
    76,
    252,
    92,
    248,
    244,
    249,
    203,
    34,
    185,
    161,
    241,
    110,
    242,
    72,
    109,
    154,
    65,
    14,
    195,
    81,
    101,
    159,
    153,
    96,
    58,
    230,
    55,
    87,
    215,
    146,
    6,
    216,
    61,
    205,
    62,
    189,
    112,
    149,
    187,
    143,
    22,
    89,
    191,
    63,
    192,
    3,
    49,
    157,
    155,
    253,
    91,
    173,
    177,
    228,
    103,
    178,
    125,
    108,
    171,
    75,
    119,
    38,
    26,
    21,
    138,
    180,
    30,
    4,
    136,
    226,
    200,
    196,
    223,
    11,
    59,
    238,
    246,
    254,
    73,
    193,
    84,
    64,
    15,
    79,
    130,
    225,
    148,
    118,
    190,
    0,
    2,
    127,
    176,
    233,
    219,
    221,
    126,
    52,
    231,
    36,
    46,
    169,
    43,
    136,
    8,
    4,
    93,
    175,
    84,
    202,
    239,
    203,
    149,
    31,
    246,
    126,
    133,
    82,
    46,
    216,
    156,
    190,
    70,
    74,
    21,
    15,
    2,
    153,
    130,
    200,
    51,
    14,
    65,
    22,
    35,
    104,
    233,
    117,
    116,
    134,
    177,
    162,
    131,
    68,
    163,
    33,
    9,
    145,
    90,
    237,
    232,
    38,
    132,
    56,
    83,
    140,
    124,
    154,
    221,
    164,
    36,
    105,
    85,
    209,
    218,
    248,
    144,
    123,
    27,
    201,
    167,
    44,
    26,
    250,
    30,
    155,
    108,
    54,
    252,
    191,
    179,
    135,
    28,
    205,
    215,
    120,
    109,
    52,
    72,
    96,
    128,
    247,
    100,
    158,
    80,
    41,
    249,
    122,
    139,
    198,
    199,
    92,
    143,
    13,
    244,
    17,
    176,
    18,
    178,
    210,
    147,
    251,
    255,
    91,
    161,
    127,
    219,
    7,
    89,
    118,
    188,
    168,
    234,
    119,
    64,
    114,
    236,
    112,
    152,
    174,
    24,
    23,
    25,
    62,
    229,
    102,
    45,
    160,
    146,
    11,
    228,
    86,
    60,
    217,
    59,
    55,
    61,
    206,
    103,
    180,
    181,
    113,
    183,
    150,
    245,
    185,
    99,
    193,
    94,
    110,
    1,
    71,
    16,
    63,
    187,
    230,
    107,
    224,
    223,
    40,
    6,
    235,
    225,
    49,
    231,
    69,
    148,
    3,
    53,
    57,
    98,
    77,
    254,
    207,
    78,
    189,
    166,
    66,
    5,
    111,
    20,
    220,
    37,
    50,
    125,
    195,
    115,
    79,
    226,
    42,
    142,
    97,
    242,
    243,
    182,
    211,
    81,
    169,
    165,
    222,
    19,
    241,
    186,
    213,
    171,
    48,
    159,
    138,
    208,
    32,
    29,
    47,
    214,
    170,
    157,
    58,
    212,
    197,
    238,
    34,
    141,
    87,
    184,
    227,
    137,
    95,
    129,
    121,
    151,
    173,
    73,
    75,
    39,
    67,
    101,
    88,
    253,
    0,
    192,
    106,
    76,
    240,
    12,
    196,
    10,
    172,
    204,
    194,
]


def replace(x):
    return x


def reflect(x):
    # print(x)
    if x % 2 == 0:
        return x + 1
    else:
        return x - 1


class TestEnigma(TestCase):
    def setUp(self) -> None:
        self.m = EnigmaMachine(bytes(data), reflect, replace)

    def test_enigma(self):
        self.assertTrue(self.m.test_reflect())
        self.assertTrue(self.m.test_replace())

    def test_property(self):
        self.assertEqual(self.m.rollers, 2)
        self.assertEqual(self.m.current_position, [0, 0])
        self.assertEqual(self.m.encode_count, 0)

    def test_dup(self):
        self.m.roll(0, 10)
        self.m.roll(1, 20)
        m2 = self.m.dup()
        self.assertEqual(m2.rollers, 2)
        self.assertEqual(m2.current_position, [10, 20])
        self.assertEqual(m2.encode_count, 0)

    def test_decode(self):
        self.m.roll(0, 10)
        self.m.roll(1, 20)
        self.assertEqual(self.m.current_position, [10, 20])
        dst = bytearray(300)
        with open(r"E:\pyproject\pyenigma\tests\encrypted.bin", "rb") as f:
            data = f.read()
            s = len(data)
            self.m.encode_into(data, dst)
            print(dst[:s])
            self.assertTrue(bytes(dst[:s]).startswith(b"hello enigma!hello enigma!he"))

    def test_decode_fail(self):
        self.m.roll(0, 11)
        self.m.roll(1, 20)
        dst = bytearray(300)
        with open(r"E:\pyproject\pyenigma\tests\encrypted.bin", "rb") as f:
            data = f.read()
            s = len(data)
            self.m.encode_into(data, dst)
            print(dst[:s])
            self.assertFalse(bytes(dst[:s]).startswith(b"hello enigma!hello enigma!he"))

    def test_dup_and_decode(self):
        self.m.roll(0, 10)
        self.m.roll(1, 20)
        dst = bytearray(300)
        with open(r"E:\pyproject\pyenigma\tests\encrypted.bin", "rb") as f:
            data = f.read()
            self.m.encode_into(data[:10], dst)
            m2 = self.m.dup()
            self.assertEqual(m2.encode_count, 10)
            self.assertEqual(m2.encode_count, self.m.encode_count)
            m2.encode_into(data[10:], memoryview(dst)[10:])
            print(dst)
            self.assertTrue(
                bytes(dst[: len(data)]).startswith(b"hello enigma!hello enigma!he")
            )

    def test_dump_table(self):
        reflect_tb = self.m.dump_reflect_table()
        replace_tb = self.m.dump_replace_table()
        self.assertEqual(bytes([reflect(i) for i in range(256)]), reflect_tb)
        self.assertEqual(bytes([replace(i) for i in range(256)]), replace_tb)


if __name__ == "__main__":
    import unittest

    unittest.main()
